{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.promise.all-settled.js","webpack:///./node_modules/@ecomplus/widget-gmc-ratings/src/index.js"],"names":["$","aFunction","newPromiseCapabilityModule","perform","iterate","target","stat","allSettled","iterable","C","this","capability","f","resolve","reject","result","promiseResolve","values","counter","remaining","promise","index","alreadyCalled","push","undefined","call","then","value","status","error","reason","options","gmcMerchantId","dialogPosition","router","window","storefrontApp","addConfirmationDialog","name","params","json","addDays","days","date","Date","now","setDate","getDate","order","customerEmail","deliveryCountry","deliveryDate","orderJson","decodeURIComponent","JSON","parse","e","buyers","main_email","shippingLine","shipping_lines","delivery_time","posting_deadline","working_days","ecomPassport","getCustomer","$ecomConfig","get","promises","gtins","optInConfig","merchant_id","order_id","number","id","email","delivery_country","estimated_delivery_date","getFullYear","getMonth","toString","padStart","opt_in_style","items","i","length","store","url","product_id","data","gtin","forEach","gtinCode","includes","catch","console","Promise","products","map","gapi","load","surveyoptin","render","currentRoute","afterEach","Error"],"mappings":"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","file":"chunk.51c40064a9467b31e05e.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\n// `Promise.allSettled` method\n// https://tc39.es/ecma262/#sec-promise.allsettled\n$({ target: 'Promise', stat: true }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (error) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: error };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","import { $ecomConfig } from '@ecomplus/utils'\nimport { store } from '@ecomplus/client'\nimport ecomPassport from '@ecomplus/passport-client'\n\nexport default (options = {}) => {\n  const { gmcMerchantId, dialogPosition } = options\n  if (gmcMerchantId) {\n    const router = window.storefrontApp && window.storefrontApp.router\n    if (router) {\n      const addConfirmationDialog = ({ name, params }) => {\n        if (name === 'confirmation' && params.json) {\n          const addDays = days => {\n            const date = new Date(Date.now())\n            date.setDate(date.getDate() + days)\n            return date\n          }\n\n          let order, customerEmail, deliveryCountry, deliveryDate\n          const orderJson = decodeURIComponent(params.json)\n          if (orderJson) {\n            try {\n              order = JSON.parse(orderJson)\n            } catch (e) {\n            }\n          }\n\n          if (order) {\n            const { buyers } = order\n            if (buyers && buyers[0]) {\n              customerEmail = buyers[0].main_email\n            }\n            const shippingLine = order.shipping_lines && order.shipping_lines[0]\n            if (shippingLine && shippingLine.delivery_time) {\n              let days = shippingLine.delivery_time.days\n              if (shippingLine.posting_deadline) {\n                days += shippingLine.delivery_time.days\n              }\n              if (shippingLine.delivery_time.working_days) {\n                days *= 1.25\n              }\n              deliveryDate = addDays(days + 3)\n            }\n          }\n\n          if (!customerEmail) {\n            customerEmail = ecomPassport.getCustomer().main_email\n          }\n          if (!deliveryCountry) {\n            deliveryCountry = $ecomConfig.get('country_code')\n          }\n          if (!deliveryDate) {\n            deliveryDate = addDays(14)\n          }\n\n          const promises = []\n          const gtins = []\n          const optInConfig = {\n            merchant_id: gmcMerchantId,\n            order_id: params.number || params.id,\n            email: customerEmail,\n            delivery_country: deliveryCountry,\n            estimated_delivery_date: deliveryDate.getFullYear() +\n              `-${(deliveryDate.getMonth() + 1).toString().padStart(2, '0')}-` +\n              deliveryDate.getDate().toString().padStart(2, '0'),\n            opt_in_style: dialogPosition || 'CENTER_DIALOG'\n          }\n\n          if (order && order.items) {\n            for (let i = 0; i < order.items.length && i <= 4; i++) {\n              promises.push(\n                store({ url: `/products/${order.items[i].product_id}.json` })\n                  .then(({ data }) => {\n                    if (data.gtin) {\n                      data.gtin.forEach(gtinCode => {\n                        if (!gtins.includes(gtinCode)) {\n                          gtins.push(gtinCode)\n                        }\n                      })\n                    }\n                  })\n                  .catch(console.error)\n              )\n            }\n          }\n\n          Promise.allSettled(promises).then(() => {\n            if (gtins.length) {\n              optInConfig.products = gtins.map(gtin => ({ gtin }))\n            }\n            window.gapi.load('surveyoptin', function () {\n              window.gapi.surveyoptin.render(optInConfig)\n            })\n          })\n        }\n      }\n\n      if (router.currentRoute) {\n        addConfirmationDialog(router.currentRoute)\n      }\n      router.afterEach(addConfirmationDialog)\n    }\n  } else {\n    console.error(new Error('Can\\'t show opt-in dialog without `gmcMerchantId` option'))\n  }\n}\n"],"sourceRoot":""}